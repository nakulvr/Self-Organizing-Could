/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package soc3;

import com.lowagie.text.Document;
import com.lowagie.text.pdf.*;
import java.io.*;
import java.lang.management.ManagementFactory;
import java.lang.management.OperatingSystemMXBean;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.net.*;
import java.sql.*;
import java.text.DecimalFormat;
import java.util.Random;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
/**
 *
 * @author user
 */
public class ExecAndSend3s3 extends javax.swing.JFrame {

    /**
     * Creates new form P3ReceiveTask
     */
    public Object o,pm,cp,sp;
    public static Double pmd,cpd,spd;
    public static double pmb,smb;
    
    public static double[] cv=new double[3];
    public static double[] pv=new double[3];
//    public static double cpd=Provider1.cpd;
//    public static double pmb=Provider1.pmb;
//    public static double smb=Provider1.smb;
    int port = 1300;
    
    double[] etij,wtij,btij;
    double budget;
    Connection con;
    Statement st;
    
    String pdffileName=ReceiveT2ExecS3.pdfFileName;
    int countWords=0,countChar=0;
    
    public ExecAndSend3s3() {
        initComponents();
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            con=DriverManager.getConnection("jdbc:mysql://192.168.1.30:3306/socDB","root","");
            st=con.createStatement();
            
        }
        catch(Exception e){
            System.out.println("Exception : "+e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        V = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        e1 = new javax.swing.JButton();
        V1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Task Execution");
        setMinimumSize(new java.awt.Dimension(920, 540));
        getContentPane().setLayout(null);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(0, 110, 900, 10);
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(0, 160, 900, 10);

        V.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        V.setForeground(new java.awt.Color(0, 102, 255));
        V.setText("Send Executed Task");
        V.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 204, 255), new java.awt.Color(102, 204, 255), null, null));
        V.setContentAreaFilled(false);
        V.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VActionPerformed(evt);
            }
        });
        //getContentPane().add(V);
        V.setBounds(10, 120, 180, 30);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Traditional Arabic", 0, 18)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(20, 180, 560, 190);

        e1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        e1.setForeground(new java.awt.Color(0, 102, 255));
        e1.setText("Evaluation");
        e1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 204, 255), new java.awt.Color(102, 204, 255), null, null));
        e1.setContentAreaFilled(false);
        e1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                e1ActionPerformed(evt);
            }
        });
        getContentPane().add(e1);
        e1.setBounds(720, 120, 150, 27);

        V1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        V1.setForeground(new java.awt.Color(0, 102, 255));
        V1.setText("Update CAN");
        V1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 204, 255), new java.awt.Color(102, 204, 255), null, null));
        V1.setContentAreaFilled(false);
        V1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                V1ActionPerformed(evt);
            }
        });
        getContentPane().add(V1);
        V1.setBounds(350, 120, 160, 30);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/tit.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 900, 500);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void VActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VActionPerformed
        // TODO add your handling code here:
        try {
            
            BufferedReader br=new BufferedReader(new FileReader("./CompletedTask/"+pdffileName+".pdf"));
            ServerSocket ss=new ServerSocket(7000);
            Socket s=ss.accept();
            PrintStream ps=new PrintStream(s.getOutputStream());
            ps.println(pdffileName);
            Document document = new Document();
            document.open();
            String[] all = new String[700];
            PdfReader reader = new PdfReader("./CompletedTask/"+pdffileName+".pdf");
            int pageSize = reader.getNumberOfPages();
            System.out.println("pagezie : "+pageSize);
            for (int i = 1; i <= pageSize; i++) {
                PdfDictionary dictionary = reader.getPageN(i);
                PRIndirectReference reference = (PRIndirectReference) dictionary.get(PdfName.CONTENTS);
                PRStream stream = (PRStream) PdfReader.getPdfObject(reference);
                byte[] bytes = PdfReader.getStreamBytes(stream);
                PRTokeniser tokenizer = new PRTokeniser(bytes);
                StringBuffer buffer = new StringBuffer();
                while (tokenizer.nextToken()) {
                    if (tokenizer.getTokenType() == PRTokeniser.TK_STRING) {
                        buffer.append(tokenizer.getStringValue());

                    }
                }
                String test = buffer.toString();
                System.out.println("sending : "+test);
                if(test.length()==0){}
                else
                    ps.println(test);
                //ps.println(test);
            }
            System.out.println("completed");
            ps.close();
            s.close(); 
        } catch (Exception e) {
            System.out.println("Exception " + e);
        }
    }//GEN-LAST:event_VActionPerformed

    private void e1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_e1ActionPerformed
        new Evaluation().setVisible(true);
    }//GEN-LAST:event_e1ActionPerformed

    private void V1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_V1ActionPerformed
        try {
            // TODO add your handling code here:
            DecimalFormat df=new DecimalFormat("#.##");            
                
            OperatingSystemMXBean operatingSystemMXBean = ManagementFactory.getOperatingSystemMXBean();
            for (Method method : operatingSystemMXBean.getClass().getDeclaredMethods())
            {
                try {
                    method.setAccessible(true);                
                    o=method.invoke(operatingSystemMXBean);                
                    if (method.getName().startsWith("getFreePhysicalMemorySize")
                            && Modifier.isPublic(method.getModifiers())){
                        pm=o;
                        pmd=Double.parseDouble(String.valueOf(pm));
                        pmb=((pmd/1024)/1024)/1024;
                        pmb=Double.parseDouble(df.format(pmb).toString());
    
                                        
                    }
                    if (method.getName().startsWith("getCommittedVirtualMemorySize")
                            && Modifier.isPublic(method.getModifiers())){
                        sp=o;
                        spd=Double.parseDouble(String.valueOf(sp));
                        smb=((spd/1024)/1024)/1024;
                        smb=Double.parseDouble(df.format(smb).toString());
    //                                      
                    }
                    DecimalFormat dff=new DecimalFormat("#.##");
                    if (method.getName().startsWith("getSystemCpuLoad")
                            && Modifier.isPublic(method.getModifiers())){
                        cp=o;
                        cpd=new Double(cp.toString());
                        Random r=new Random();
                        int t=0;                    
                        if(cpd == -1.0 || cpd == 1.0){
                            do{
                                t=r.nextInt(100);
                            }while(t==0);
                            cpd=(double)t;
                        }
                        int t2=r.nextInt(2);
                        System.out.println("01 : "+t2);
                        if(t2==0)
                            cpd=cpd*0.001;
                        else
                            cpd=cpd*0.01;
                        cpd=cpd*100;
                        cpd=Double.parseDouble(dff.format(cpd).toString());    
                        
                    }
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(ExecAndSend3s3.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalArgumentException ex) {
                    Logger.getLogger(ExecAndSend3s3.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InvocationTargetException ex) {
                    Logger.getLogger(ExecAndSend3s3.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            cv[0]=pmb;
            cv[1]=cpd;
            cv[2]=smb;            
    
                //==============Physical memory price 5% of physicalmem value================
                String pa=String.valueOf(pmb);
                int pdi=pa.indexOf(".");
                String p1=pa.substring(0, pdi);
                String p2=pa.substring(pdi+1);
                String p3="";
                if(pa.length()==3){
                    p3=p1+p2+"0";
                }
                else
                    p3=p1+p2;
                double pmbV=Double.parseDouble(p3);
                double pPrice=(pmbV*5)/100;    
                pv[0]=pPrice;
                
                
                //==============CPU memory price 0.5% of cpu value================
                String ca=String.valueOf(cpd);
                int cdi=ca.indexOf(".");
                String c1=ca.substring(0, cdi);
                String c2=ca.substring(cdi+1);
                String c3="";
                if(ca.length()==3){
                    c3=c1+c2+"0";
                }
                else
                    c3=c1+c2;
                double cmbV=Double.parseDouble(c3);
                double cPrice=(cmbV * 0.5)/100;    
                pv[1]=cPrice;
                
                //==============Swap memory price 5% of swap value================
                String sa=String.valueOf(smb);
                int sdi=sa.indexOf(".");
                String s1=sa.substring(0, sdi);
                String s2=sa.substring(sdi+1);
                String s3="";
                if(sa.length()==3){
                    s3=s1+s2+"0";
                }
                else
                    s3=s1+s2;
                double smbV=Double.parseDouble(s3);
                double sPrice=(smbV*5)/100;    
                pv[2]=sPrice;
                
                int id=5;
                st.executeUpdate("update can set pm="+cv[0]+",cpu="+cv[1]+",sm="+cv[2]+",pmprice="+pv[0]+",cpuprice="+pv[1]+",smprice="+pv[2]+" where ID="+id+"");
        JOptionPane.showMessageDialog(null,"CAN updated successfully!");
        }catch(Exception e){
            System.out.println("Exception : "+e);
        }
    }//GEN-LAST:event_V1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExecAndSend3s3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExecAndSend3s3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExecAndSend3s3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExecAndSend3s3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ExecAndSend3s3().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton V;
    private javax.swing.JButton V1;
    private javax.swing.JButton e1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
